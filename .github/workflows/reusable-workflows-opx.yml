on:
  workflow_call:
  
jobs:
  check_parallelism:
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2

  notify_start:
    runs-on: 'ubuntu-latest'
    needs: [check_parallelism]
    steps:
      - name: 'Dummy'
        run: |
          ls -lash;

  brakeman:
    runs-on: 'ubuntu-latest'
    needs: [notify_start]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.2
      - name: Install Brakeman
        run: gem install brakeman
      - name: Run Brakeman
        run: brakeman --rails5 --faster --no-color | exit 0

  # 0
  # Talisman - pre-commit prevent secrets

  # 1
  # (Verificar com SREs/Devs/TechLeads)
  # Erros estão parando a pipeline
  #
  # rubocop:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Setup Ruby
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         ruby-version: 3.1.2
  #     - name: Install dependencies
  #       run: |
  #         gem install bundler
  #         bundle install
  #     - name: Run RuboCop linter
  #       run: bundle exec rubocop

  unit_tests:
    runs-on: 'ubuntu-latest'
    needs: [notify_start]
    steps:
      - uses: actions/checkout@v2
      - name: "Set up Ruby"
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.2
      - name: "Run UnitTests"
        run: |
          bundle install
          bundle exec rspec || exit 0

  
  # 2
  # (Verificar com SREs/Devs/TechLeads)
  # Precisa criar conta paga
  #
  # sonarcloud:
  #   runs-on: 'ubuntu-latest'
  #   needs: [notify_start]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Ruby
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         ruby-version: 3.1.2
  #     - name: SonarCloud Scan
  #       uses: SonarSource/sonarcloud-github-action@master
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       with:
  #         args: >
  #           -Dsonar.organization=devsecopsgithubactionsnodejsproject
  #           -Dsonar.projectKey=devsecopsganodejsprojectkey


  # (Verificar com SREs/Devs/TechLeads)
  #
  # 3- Mutation Tests - PIT - https://pitest.org/
  # 4- OPA Conftest - https://github.com/open-policy-agent/conftest
  # 5- Kubesec - https://kubesec.io/
  

  # 6
  # (Verificar com SREs/Devs/TechLeads)
  # Precisa criar conta paga
  #
  #  snyk:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Snyk test
  #       uses: snyk/actions/ruby@master
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  kubectl_install:
    runs-on: 'ubuntu-latest'
    needs: [unit_tests]
    steps:
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.23.0' # default is latest stable
      id: install

  version_tag:
    runs-on: 'ubuntu-latest'
    needs: [brakeman,unit_tests]
    outputs:
      version_tag: ${{ steps.version.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
      - id: version
        name: 'Version Tagging'
        run: |
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          GIT_HASH=$(git rev-parse --short "$GITHUB_SHA")
          VERSION_TAG="${{env.MAJOR_VERSION}}.$TIMESTAMP.$GIT_HASH"
          echo "::set-output name=tag::$VERSION_TAG"
          echo $VERSION_TAG > version
      - uses: actions/upload-artifact@v3
        with:
          name: version
          path: version
          retention-days: 30

 

  ## Build
  build_and_push_image:
    runs-on: 'ubuntu-latest'
    needs: [version_tag]
    steps:

    #######


    # short sha
      - uses: actions/checkout@v2
      - name: Set short git commit SHA
        id: vars1
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "::set-output name=short_sha::$calculatedSha"

      - name: Confirm git commit SHA output
        run: echo ${{ steps.vars1.outputs.short_sha }}

      - name: Set the value
        id: step_one
        run: |
            echo "sha1=$GITHUB_SHA" >> $GITHUB_OUTPUT
      - name: Use the value
        id: step_two
        run: |
            echo "$GITHUB_SHA"
            echo "${{ steps.step_one.outputs.sha1 }}"
    
    
    ######
      - uses: actions/checkout@v2
      - name: 'Build Image'
      
        run: |

          rm ./config/application.rb

          cat <<EOF > ./config/application.rb
          require_relative "boot"

          require "rails/all"
          require "active_support/core_ext/numeric/time"

          Bundler.require(*Rails.groups)

          module Qcarreiras
            class Application < Rails::Application
              config.load_defaults 7.0

              config.time_zone = "America/Sao_Paulo"

              config.autoload_paths << "#{Rails.root}/app/services"

              config.api_only = true

              config.i18n.available_locales = %w(en pt-BR)

              config.hosts << '${{env.ENVIRONMENT}}-${{env.APP_NAME}}-${{ steps.vars1.outputs.short_sha }}.${{env.DOMAIN}}'

              config.auth_application_ttl = 5.minutes
            end
          end
          
          EOF

          cat ./config/application.rb
        
          docker build -t ${{env.DEV_ECR_REPOSITORY}}/${{env.ENVIRONMENT}}-${{env.APP_NAME}}.${{env.DOMAIN}}-${{env.APP_NAME}}:${{needs.version_tag.outputs.version_tag}} .
      
      # 7
      # (Verificar com SREs/Devs/TechLeads)
      #  Erros estão parando a pipeline 
      #
      #
      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: '${{env.DEV_ECR_REPOSITORY}}/${{env.ENVIRONMENT}}-${{env.APP_NAME}}.${{env.DOMAIN}}-${{env.APP_NAME}}:${{needs.version_tag.outputs.version_tag}}'
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'
       
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_GITHUB_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_GITHUB_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: 'Registry login'
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{env.DEV_ECR_REPOSITORY}}
      - name: 'Push Image'
        run: |
          docker push ${{env.DEV_ECR_REPOSITORY}}/${{env.ENVIRONMENT}}-${{env.APP_NAME}}.${{env.DOMAIN}}-${{env.APP_NAME}}:${{needs.version_tag.outputs.version_tag}}

  git_tag:
    runs-on: 'ubuntu-latest'
    needs: [build_and_push_image]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v3
        with:
          name: version
      - name: 'Tagging'
        run: |
          VERSION=$(cat version) || exit 1
          echo $VERSION
          git config user.email "github_actions@qcx.com.br"
          git config user.name "Github Actions"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git tag -a $VERSION -m "Automatic flow, $VERSION"
          git push origin $VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

 
  deploy:
    runs-on: 'ubuntu-latest'
    needs: [git_tag]
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_GITHUB_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_GITHUB_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: actions/download-artifact@v3
        with:
          name: version
      - name: 'Registry login'
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{env.DEV_ECR_REPOSITORY}}

      - name: 'Update kube config'
        run: aws eks update-kubeconfig --name ${{ env.CLUSTER }} --region ${{ env.AWS_REGION }}

      - name: Create namespace hermes
        run: |
         kubectl create namespace ${{env.APP_NAME}} --dry-run=client -o yaml | kubectl apply -f -
         kubectl label namespace ${{env.APP_NAME}} istio-injection=enabled --overwrite

      # short sha
      - name: Set short git commit SHA
        id: vars2
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "::set-output name=short_sha::$calculatedSha"

      - name: Confirm git commit SHA output
        run: echo ${{ steps.vars2.outputs.short_sha }}

      - name: Set the value
        id: step_one
        run: |
            echo "sha2=$GITHUB_SHA" >> $GITHUB_OUTPUT
      - name: Use the value
        id: step_two
        run: |
            echo "$GITHUB_SHA"
            echo "${{ steps.step_one.outputs.sha2 }}"


      ## VirtualService

      - name: Create virtualservice file
        run: |
        
          cat <<EOF > virtualservice.yaml
          apiVersion: networking.istio.io/v1beta1
          kind: VirtualService
          metadata:
            name: ${{env.APP_NAME}}-${{ steps.vars2.outputs.short_sha }}
            namespace: ${{env.APP_NAME}}
          spec:
            gateways:
            - istio-system/grupoq-gateway
            hosts:
            - ${{env.ENVIRONMENT}}-${{env.APP_NAME}}-${{ steps.vars2.outputs.short_sha }}.${{env.DOMAIN}}
            http:
            - match:
              - uri:
                  prefix: /
              route:
              - destination:
                  host: ${{env.APP_NAME}}-${{ steps.vars2.outputs.short_sha }}
                  port:
                    number: 4002
          EOF

      ## App

      - name: Create deployment file
        run: |
          VERSION=$(cat version)
          cat <<EOF > app-deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${{env.APP_NAME}}-${{ steps.vars2.outputs.short_sha }}
            namespace: ${{env.APP_NAME}}
          spec:
            selector:
              matchLabels:
                app: ${{env.APP_NAME}}-${{ steps.vars2.outputs.short_sha }}
            template:
              metadata:
                labels:
                  app: ${{env.APP_NAME}}-${{ steps.vars2.outputs.short_sha }}
              spec:
                containers:
                - name: ${{env.APP_NAME}}-${{ steps.vars2.outputs.short_sha }}
                  image: ${{env.DEV_ECR_REPOSITORY}}/${{env.ENVIRONMENT}}-${{env.APP_NAME}}.${{env.DOMAIN}}-${{env.APP_NAME}}:$VERSION
                  ports:
                    - containerPort: 4002
                  env:
                  - name: REDIS_URL
                    value: "redis://redis:6379/0"
                  - name: ELASTICSEARCH_URL
                    value: "elasticsearch:9200"
                  - name: DB_HOST
                    value: ${{env.POSTGRES}}
                  - name: RAILS_ENV
                    value: "development"
                  - name: DATABASE_PASSWORD
                    value: "password"
                  - name: POSTGRES_PASSWORD
                    value: "password"
                  - name: DB_USERNAME
                    value: "postgres"
                  - name: DB_PASSWORD
                    value: "password"
                  - name: APPLICATION_VERSION
                    value: $VERSION
          EOF


      - name: Create service file
        run: |
          
          cat <<EOF > app-service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: ${{env.APP_NAME}}-${{ steps.vars2.outputs.short_sha }}
            namespace: ${{env.APP_NAME}}
          spec:
            selector:
              app: ${{env.APP_NAME}}-${{ steps.vars2.outputs.short_sha }}
            ports:
              - port: 4002
                targetPort: 4002
            type: ClusterIP
          EOF

      #### Redis

      - name: Create service redis
        run: |
          
          cat <<EOF > redis-service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: redis-${{ steps.vars2.outputs.short_sha }}
            namespace: ${{env.APP_NAME}}
          spec:
            type: ClusterIP
            selector:
              app: ${{env.APP_NAME}}-${{ steps.vars2.outputs.short_sha }}
            ports:
            - name: tcp-redis
              port: 6379
              targetPort: 6379
          EOF

      - name: Create deployment redis
        run: |
          
          cat <<EOF > redis-deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: redis-${{ steps.vars2.outputs.short_sha }}
            namespace: ${{env.APP_NAME}}
          spec:
            selector:
              matchLabels:
                app: ${{env.APP_NAME}}-${{ steps.vars2.outputs.short_sha }}
            template:
              metadata:
                labels:
                  app: ${{env.APP_NAME}}-${{ steps.vars2.outputs.short_sha }}
              spec:
                securityContext:
                  fsGroup: 1000
                  runAsGroup: 1000
                  runAsNonRoot: true
                  runAsUser: 1000
                containers:
                - name: redis
                  securityContext:
                    allowPrivilegeEscalation: false
                    capabilities:
                      drop:
                        - all
                    privileged: false
                    readOnlyRootFilesystem: true
                  image: redis:alpine
                  ports:
                  - containerPort: 6379
                  readinessProbe:
                    periodSeconds: 5
                    tcpSocket:
                      port: 6379
                  livenessProbe:
                    periodSeconds: 5
                    tcpSocket:
                      port: 6379
                  volumeMounts:
                  - mountPath: /data
                    name: redis-data
                  resources:
                    limits:
                      memory: 256Mi
                      cpu: 125m
                    requests:
                      cpu: 70m
                      memory: 200Mi
                volumes:
                - name: redis-data
                  emptyDir: {}
          EOF

## Apply k8s yamls

      - name: 'Deploy to EKS'
        run: |
          

          kubectl apply -f redis-service.yaml
          kubectl apply -f redis-deployment.yaml

          kubectl apply -f app-deployment.yaml
          kubectl apply -f app-service.yaml
          kubectl apply -f virtualservice.yaml


  DNS:
      runs-on: 'ubuntu-latest'
      steps:
        - uses: actions/checkout@v2  
    
    
      # short sha
        - name: Set short git commit SHA
          id: vars3
          run: |
            calculatedSha=$(git rev-parse --short ${{ github.sha }})
            echo "::set-output name=short_sha::$calculatedSha"

        - name: Confirm git commit SHA output
          run: echo ${{ steps.vars3.outputs.short_sha }}


        
        - name: Set the value
          id: step_one
          run: |
              echo "sha3=$GITHUB_SHA" >> $GITHUB_OUTPUT
        - name: Use the value
          id: step_two
          run: |
              echo "$GITHUB_SHA"
              echo "${{ steps.step_one.outputs.sha3 }}"
              
        
        - name: Create_DNS_Register
          uses: rez0n/create-dns-record@v2.1
          with:
            type: "CNAME"
            name: "${{env.ENVIRONMENT}}-${{env.APP_NAME}}-${{ steps.vars3.outputs.short_sha }}.${{env.DOMAIN}}"
            content: "${{env.LOAD_BALANCER}}"
            ttl: 1
            proxied: true
            token: ${{ secrets.CLOUDFLARE_TOKEN }}
            zone: ${{ secrets.CLOUDFLARE_ZONE }}
            tag: ${{env.ENVIRONMENT}}-${{env.APP_NAME}}



  Your_URL:
    runs-on: 'ubuntu-latest'
    needs: [deploy]
    steps:
      - uses: actions/checkout@v2  
      # short sha
      - name: Set short git commit SHA
        id: vars4
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "::set-output name=short_sha::$calculatedSha"

      - name: Confirm git commit SHA output
        run: echo ${{ steps.vars4.outputs.short_sha }}

      - name: Your URL
        run: echo ${{env.ENVIRONMENT}}-${{env.APP_NAME}}-${{ steps.vars4.outputs.short_sha }}.${{env.DOMAIN}}
  
  zap_scan:
    runs-on: 'ubuntu-latest'
    needs: [Your_URL]
    name: OWASP ZAP - Run DAST scan web application
    steps:

      - uses: actions/checkout@v2  
      
      # short sha
      - name: Set short git commit SHA 5
        id: vars5
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "::set-output name=short_sha::$calculatedSha"

      - name: Confirm git commit SHA output
        run: echo ${{ steps.vars5.outputs.short_sha }}

            
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.6.1
        with:
          docker_name: 'owasp/zap2docker-stable'
          target: 'https://${{env.ENVIRONMENT}}-${{env.APP_NAME}}-${{ steps.vars5.outputs.short_sha }}.${{env.DOMAIN}}'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'  

